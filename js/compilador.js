/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var compilador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,12],$V2=[1,22],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,15],$V7=[1,16],$V8=[1,17],$V9=[1,18],$Va=[2,5,15,16,32,49,50,51,60,62,67,68],$Vb=[1,29],$Vc=[1,36],$Vd=[1,47],$Ve=[1,56],$Vf=[1,50],$Vg=[1,51],$Vh=[1,52],$Vi=[1,45],$Vj=[1,54],$Vk=[1,55],$Vl=[1,63],$Vm=[1,75],$Vn=[1,76],$Vo=[21,34,35],$Vp=[43,44],$Vq=[2,40],$Vr=[1,84],$Vs=[1,85],$Vt=[1,86],$Vu=[1,87],$Vv=[1,80],$Vw=[1,81],$Vx=[1,82],$Vy=[1,83],$Vz=[14,21,23,28,29,30,31,34,35,38,39,40,41,43,44],$VA=[21,34,35,43,44],$VB=[14,23],$VC=[14,23,59],$VD=[1,105],$VE=[14,21,23,28,29,34,35,38,39,40,41,43,44],$VF=[21,23];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"PROGRAMA":3,"LSENTENCIAS":4,"EOF":5,"SENTENCIAS":6,"INST_CONSOLA":7,"INST_CREAR_VARIABLES":8,"INST_ASIGNAR_VARIABLES":9,"INST_GRAFICADOR":10,"INST_IF":11,"INST_WHILE":12,"INST_DO_WHILE":13,"eos":14,"llc":15,"console":16,"pt":17,"log":18,"pa":19,"DATO_CONSOL":20,"pc":21,"EXP_CADENA":22,"cm":23,"EXP_NUMERICA":24,"DATO":25,"cadena":26,"numero":27,"mas":28,"menos":29,"por":30,"div":31,"id":32,"CONDICION":33,"and":34,"or":35,"not":36,"COMPARACION":37,"menor":38,"mayor":39,"menorIgual":40,"mayorIgual":41,"DATO_COMPARACION":42,"mismo":43,"diferente":44,"false":45,"true":46,"VARIABLES_ACCESO":47,"VARIABLES_CUERPO":48,"let":49,"var":50,"const":51,"VARIABLES_ASIGNACION":52,"VARIABLES_TIPO":53,"dspts":54,"TIPO_DATO":55,"boolean":56,"string":57,"number":58,"igual":59,"graficar_ts":60,"ASIGNACION":61,"if":62,"lla":63,"ELSE":64,"else":65,"IF":66,"while":67,"do":68,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"eos",15:"llc",16:"console",17:"pt",18:"log",19:"pa",21:"pc",23:"cm",26:"cadena",27:"numero",28:"mas",29:"menos",30:"por",31:"div",32:"id",34:"and",35:"or",36:"not",38:"menor",39:"mayor",40:"menorIgual",41:"mayorIgual",43:"mismo",44:"diferente",45:"false",46:"true",49:"let",50:"var",51:"const",54:"dspts",56:"boolean",57:"string",58:"number",59:"igual",60:"graficar_ts",62:"if",63:"lla",65:"else",66:"IF",67:"while",68:"do"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[7,7],[20,1],[20,3],[20,1],[25,1],[25,1],[22,1],[24,1],[24,3],[24,3],[24,3],[24,3],[24,2],[24,1],[24,3],[33,3],[33,3],[33,2],[33,1],[33,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[42,1],[42,1],[42,1],[42,1],[8,3],[47,1],[47,1],[47,1],[48,1],[48,2],[48,2],[48,3],[48,3],[48,4],[48,4],[48,5],[53,2],[55,1],[55,1],[55,1],[52,2],[10,4],[9,2],[61,2],[61,4],[11,7],[11,8],[64,2],[64,4],[12,7],[13,8]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10:
this.$=$$[$0];
break;
case 11: case 12:
this.$=instruccionesAST.saltoError(); reportarError("Sintactico", "Linea mal escrita:<br>"+editor.getLine(this._$.first_line-1), this._$.first_column, this._$.first_line-1);
break;
case 13:
 this.$ = instruccionesAST.nuevoImprimir($$[$0-2]);
break;
case 14: case 16: case 17: case 18: case 39: case 40:
 this.$ = $$[$0]; 
break;
case 15:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.CONCATENACION);
break;
case 19:
 this.$ = instruccionesAST.nuevoValor($$[$0],TIPO_VALOR.CADENA);
break;
case 20:
 this.$ = instruccionesAST.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO); 
break;
case 21:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.SUMA);
break;
case 22:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.RESTA);
break;
case 23:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MULTIPLICACION);
break;
case 24:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DIVISION);
break;
case 25:
 this.$ = instruccionesAST.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 26:
 this.$ = instruccionesAST.nuevoValor($$[$0],TIPO_VALOR.IDENTIFICADOR)
break;
case 27: case 32:
 this.$ = $$[$0-1];
break;
case 28:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.AND);
break;
case 29:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.OR);
break;
case 30:
 this.$ = instruccionesAST.nuevoOperacionUnaria($$[$0],TIPO_OPERACION.NEGACION);
break;
case 31: case 55: case 56: case 57: case 58: case 59:
 this.$ = $$[$0];
break;
case 33:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MENOR_QUE);
break;
case 34:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MAYOR_QUE);
break;
case 35:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MENOR_IGUAL);
break;
case 36:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MAYOR_IGUAL);
break;
case 37:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.IGUAL);
break;
case 38:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DIFERENTE);
break;
case 41: case 42:
 this.$ = instruccionesAST.nuevoValor($$[$0],TIPO_VALOR.BOOLEANO);
break;
case 43:
 this.$ = instruccionesAST.nuevaVariable($$[$0-2],$$[$0-1]); 
break;
case 44: case 45: case 46: case 66:
this.$ = $$[$0];
break;
case 47:
 this.$ = [ instruccionesAST.crearVariable($$[$0],null,null) ];
break;
case 48:
 this.$ = [ instruccionesAST.crearVariable($$[$0-1],null,$$[$0]) ];
break;
case 49:
 this.$ = [ instruccionesAST.crearVariable($$[$0-1],$$[$0],null) ];
break;
case 50:
 this.$ = [ instruccionesAST.crearVariable($$[$0-2],$$[$0-1],$$[$0]) ];
break;
case 51:
 $$[$0].push(instruccionesAST.crearVariable($$[$0-2],null,null)); this.$ = $$[$0];
break;
case 52:
 $$[$0].push(instruccionesAST.crearVariable($$[$0-3],null,$$[$0-2])); this.$ = $$[$0];
break;
case 53:
 $$[$0].push(instruccionesAST.crearVariable($$[$0-3],$$[$0-2],null)); this.$ = $$[$0];
break;
case 54:
 $$[$0].push(instruccionesAST.crearVariable($$[$0-4],$$[$0-3],$$[$0-2])); this.$ = $$[$0];
break;
case 60:
 this.$ = instruccionesAST.graficar_ts(); 
break;
case 61:
 this.$ = instruccionesAST.nuevasAsignaciones($$[$0-1]);
break;
case 62:
 this.$ = [instruccionesAST.nuevaAsignacion($$[$0-1],$$[$0])];
break;
case 63:
 $$[$0].push(instruccionesAST.nuevaAsignacion($$[$0-3],$$[$0-2])); this.$ = $$[$0];
break;
case 64:
 this.$ = instruccionesAST.nuevoIf($$[$0-4],$$[$0-1],"null");
break;
case 65:
 this.$ = instruccionesAST.nuevoIf($$[$0-5],$$[$0-2],$$[$0])
break;
case 67:
this.$ = instruccionesAST.nuevoElse($$[$0-1]);
break;
case 68:
 this.$ = instruccionesAST.nuevoWhile($$[$0-4],$$[$0-1]);
break;
case 69:
 this.$ = instruccionesAST.nuevoDoWhile($$[$0-1],$$[$0-5]);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,16:$V1,32:$V2,47:13,49:$V3,50:$V4,51:$V5,60:$V6,61:14,62:$V7,67:$V8,68:$V9},{1:[3]},{2:$V0,5:[1,23],6:24,7:4,8:5,9:6,10:7,11:8,12:9,13:10,16:$V1,32:$V2,47:13,49:$V3,50:$V4,51:$V5,60:$V6,61:14,62:$V7,67:$V8,68:$V9},o($Va,[2,3]),o($Va,[2,4]),o($Va,[2,5]),o($Va,[2,6]),o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),o($Va,[2,10]),{14:[1,25],15:[1,26]},{17:[1,27]},{32:$Vb,48:28},{14:[1,30]},{19:[1,31]},{19:[1,32]},{19:[1,33]},{63:[1,34]},{32:[2,44]},{32:[2,45]},{32:[2,46]},{52:35,59:$Vc},{1:[2,1]},o($Va,[2,2]),o($Va,[2,11]),o($Va,[2,12]),{18:[1,37]},{14:[1,38]},{14:[2,47],23:[1,41],52:39,53:40,54:[1,42],59:$Vc},o($Va,[2,61]),{21:[1,43]},{19:$Vd,22:53,24:48,26:$Ve,27:$Vf,29:$Vg,32:$Vh,33:44,36:$Vi,37:46,42:49,45:$Vj,46:$Vk},{19:$Vd,22:53,24:48,26:$Ve,27:$Vf,29:$Vg,32:$Vh,33:57,36:$Vi,37:46,42:49,45:$Vj,46:$Vk},{2:$V0,4:58,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,16:$V1,32:$V2,47:13,49:$V3,50:$V4,51:$V5,60:$V6,61:14,62:$V7,67:$V8,68:$V9},{14:[2,62],23:[1,59]},{19:$Vl,22:61,24:62,25:60,26:$Ve,27:$Vf,29:$Vg,32:$Vh},{19:[1,64]},o($Va,[2,43]),{14:[2,48],23:[1,65]},{14:[2,49],23:[1,67],52:66,59:$Vc},{32:$Vb,48:68},{55:69,56:[1,70],57:[1,71],58:[1,72]},{14:[1,73]},{21:[1,74],34:$Vm,35:$Vn},{19:$Vd,22:53,24:48,26:$Ve,27:$Vf,29:$Vg,32:$Vh,33:77,36:$Vi,37:46,42:49,45:$Vj,46:$Vk},o($Vo,[2,31]),{19:$Vd,22:53,24:79,26:$Ve,27:$Vf,29:$Vg,32:$Vh,33:78,36:$Vi,37:46,42:49,45:$Vj,46:$Vk},o($Vp,$Vq,{28:$Vr,29:$Vs,30:$Vt,31:$Vu,38:$Vv,39:$Vw,40:$Vx,41:$Vy}),{43:[1,88],44:[1,89]},o($Vz,[2,20]),{19:$Vl,24:90,27:$Vf,29:$Vg,32:$Vh},o($Vz,[2,26]),o($VA,[2,39]),o($VA,[2,41]),o($VA,[2,42]),o([14,21,23,34,35,43,44],[2,19]),{21:[1,91],34:$Vm,35:$Vn},{2:$V0,6:24,7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:[1,92],16:$V1,32:$V2,47:13,49:$V3,50:$V4,51:$V5,60:$V6,61:14,62:$V7,67:$V8,68:$V9},{32:$V2,61:93},o($VB,[2,59]),o($VB,[2,17]),o($VB,[2,18],{28:$Vr,29:$Vs,30:$Vt,31:$Vu}),{19:$Vl,24:94,27:$Vf,29:$Vg,32:$Vh},{19:$Vl,20:95,22:96,24:97,26:$Ve,27:$Vf,29:$Vg,32:$Vh},{32:$Vb,48:98},{14:[2,50],23:[1,99]},{32:$Vb,48:100},{14:[2,51]},o($VC,[2,55]),o($VC,[2,56]),o($VC,[2,57]),o($VC,[2,58]),o($Va,[2,60]),{63:[1,101]},{19:$Vd,22:53,24:48,26:$Ve,27:$Vf,29:$Vg,32:$Vh,33:102,36:$Vi,37:46,42:49,45:$Vj,46:$Vk},{19:$Vd,22:53,24:48,26:$Ve,27:$Vf,29:$Vg,32:$Vh,33:103,36:$Vi,37:46,42:49,45:$Vj,46:$Vk},o($Vo,[2,30]),{21:[1,104],34:$Vm,35:$Vn},o($Vp,$Vq,{21:$VD,28:$Vr,29:$Vs,30:$Vt,31:$Vu,38:$Vv,39:$Vw,40:$Vx,41:$Vy}),{19:$Vl,24:106,27:$Vf,29:$Vg,32:$Vh},{19:$Vl,24:107,27:$Vf,29:$Vg,32:$Vh},{19:$Vl,24:108,27:$Vf,29:$Vg,32:$Vh},{19:$Vl,24:109,27:$Vf,29:$Vg,32:$Vh},{19:$Vl,24:110,27:$Vf,29:$Vg,32:$Vh},{19:$Vl,24:111,27:$Vf,29:$Vg,32:$Vh},{19:$Vl,24:112,27:$Vf,29:$Vg,32:$Vh},{19:$Vl,24:113,27:$Vf,29:$Vg,32:$Vh},{19:$Vl,22:53,24:115,26:$Ve,27:$Vf,29:$Vg,32:$Vh,42:114,45:$Vj,46:$Vk},{19:$Vl,22:53,24:115,26:$Ve,27:$Vf,29:$Vg,32:$Vh,42:116,45:$Vj,46:$Vk},o($VE,[2,25],{30:$Vt,31:$Vu}),{63:[1,117]},{67:[1,118]},{14:[2,63]},{21:$VD,28:$Vr,29:$Vs,30:$Vt,31:$Vu},{21:[1,119],23:[1,120]},o($VF,[2,14]),o($VF,[2,16],{28:$Vr,29:$Vs,30:$Vt,31:$Vu}),{14:[2,52]},{32:$Vb,48:121},{14:[2,53]},{2:$V0,4:122,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,16:$V1,32:$V2,47:13,49:$V3,50:$V4,51:$V5,60:$V6,61:14,62:$V7,67:$V8,68:$V9},o($Vo,[2,28]),o([21,35],[2,29],{34:$Vm}),o($Vo,[2,32]),o($Vz,[2,27]),o($Vo,[2,33],{28:$Vr,29:$Vs,30:$Vt,31:$Vu}),o($Vo,[2,34],{28:$Vr,29:$Vs,30:$Vt,31:$Vu}),o($Vo,[2,35],{28:$Vr,29:$Vs,30:$Vt,31:$Vu}),o($Vo,[2,36],{28:$Vr,29:$Vs,30:$Vt,31:$Vu}),o($VE,[2,21],{30:$Vt,31:$Vu}),o($VE,[2,22],{30:$Vt,31:$Vu}),o($Vz,[2,23]),o($Vz,[2,24]),o($Vo,[2,37]),o($Vo,$Vq,{28:$Vr,29:$Vs,30:$Vt,31:$Vu}),o($Vo,[2,38]),{2:$V0,4:123,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,16:$V1,32:$V2,47:13,49:$V3,50:$V4,51:$V5,60:$V6,61:14,62:$V7,67:$V8,68:$V9},{19:[1,124]},{14:[1,125]},{19:$Vl,20:126,22:96,24:97,26:$Ve,27:$Vf,29:$Vg,32:$Vh},{14:[2,54]},{2:$V0,6:24,7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:[1,127],16:$V1,32:$V2,47:13,49:$V3,50:$V4,51:$V5,60:$V6,61:14,62:$V7,67:$V8,68:$V9},{2:$V0,6:24,7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:[1,128],16:$V1,32:$V2,47:13,49:$V3,50:$V4,51:$V5,60:$V6,61:14,62:$V7,67:$V8,68:$V9},{19:$Vd,22:53,24:48,26:$Ve,27:$Vf,29:$Vg,32:$Vh,33:129,36:$Vi,37:46,42:49,45:$Vj,46:$Vk},o($Va,[2,13]),o($VF,[2,15]),o($Va,[2,64],{64:130,65:[1,131]}),o($Va,[2,68]),{21:[1,132],34:$Vm,35:$Vn},o($Va,[2,65]),{63:[1,134],66:[1,133]},o($Va,[2,69]),o($Va,[2,66]),{2:$V0,4:135,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,16:$V1,32:$V2,47:13,49:$V3,50:$V4,51:$V5,60:$V6,61:14,62:$V7,67:$V8,68:$V9},{2:$V0,6:24,7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:[1,136],16:$V1,32:$V2,47:13,49:$V3,50:$V4,51:$V5,60:$V6,61:14,62:$V7,67:$V8,68:$V9},o($Va,[2,67])],
defaultActions: {19:[2,44],20:[2,45],21:[2,46],23:[2,1],68:[2,51],93:[2,63],98:[2,52],100:[2,53],121:[2,54]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Omitir espacios en blanco
break;
case 1://comentario simple línea
break;
case 2://comentario multiple líneas
break;
case 3:return 27;              //Reconocimiento de numeros
break;
case 4:return 16;
break;
case 5:return 18;
break;
case 6:return 46;
break;
case 7:return 45;
break;
case 8:yy_.yytext = yy_.yytext.slice(1,-1);  return 26;
break;
case 9:yy_.yytext = yy_.yytext.slice(1,-1);  return 26;
break;
case 10:return 58;
break;
case 11:return 56;
break;
case 12:return 57;
break;
case 13:return 'function';
break;
case 14:return 'void';
break;
case 15:return 50;
break;
case 16:return 49;
break;
case 17:return 51;
break;
case 18:return 'type';
break;
case 19:return 60;
break;
case 20:return 62;
break;
case 21:return 65;
break;
case 22:return 67;
break;
case 23:return 68;
break;
case 24:return 'for';
break;
case 25:return 'of';
break;
case 26:return 'in';
break;
case 27:return 'continue';
break;
case 28:return 'break';
break;
case 29:return 'return';
break;
case 30:return 'switch';
break;
case 31:return 'case';
break;
case 32:return 'default';
break;
case 33:return 'type';
break;
case 34:return 'pop';
break;
case 35:return 'push';
break;
case 36:return 41;
break;
case 37:return 40;
break;
case 38:return 43;
break;
case 39:return 44;
break;
case 40:return 39;
break;
case 41:return 38;
break;
case 42:return 34;
break;
case 43:return 35;
break;
case 44:return 36;
break;
case 45:return 'qEs';
break;
case 46:return 17;
break;
case 47:return 23;
break;
case 48:return 19;
break;
case 49:return 21;
break;
case 50:return 28;
break;
case 51:return 30;
break;
case 52:return 31;
break;
case 53:return 29;
break;
case 54:return 'modular';
break;
case 55:return 54;
break;
case 56:return 63;
break;
case 57:return 15;
break;
case 58:return 59;
break;
case 59:return 'ca';
break;
case 60:return 'cc';
break;
case 61:return 14;
break;
case 62:return 32;
break;
case 63:return 5;                 //End Of File
break;
case 64:reportarError("Lexico", "Caracter no reconocido por el lenguaje <br>"+yy_.yytext, yy_.yylloc.first_column, yy_.yylloc.first_line);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:"[^"]*")/,/^(?:'[^']*')/,/^(?:[N|n]umber\b)/,/^(?:boolean\b)/,/^(?:[S|s]tring\b)/,/^(?:function\b)/,/^(?:void\b)/,/^(?:var\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:type\b)/,/^(?:graficar_ts\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:type\b)/,/^(?:pop\b)/,/^(?:push\b)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:\.)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:%)/,/^(?::)/,/^(?:\{)/,/^(?:\})/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"string":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = compilador;
exports.Parser = compilador.Parser;
exports.parse = function () { return compilador.parse.apply(compilador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}