/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var compilador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,24],$V1=[2,6],$V2=[1,7],$V3=[1,32],$V4=[1,25],$V5=[1,34],$V6=[1,35],$V7=[1,36],$V8=[1,28],$V9=[1,29],$Va=[1,30],$Vb=[1,31],$Vc=[1,33],$Vd=[2,5,10,11,38,71,72,73,81,83,87,88,89],$Ve=[2,5,10,11,16,38,71,72,73,81,83,87,88,89],$Vf=[14,23],$Vg=[1,54],$Vh=[1,55],$Vi=[1,60],$Vj=[1,69],$Vk=[2,76],$Vl=[1,70],$Vm=[1,81],$Vn=[1,75],$Vo=[1,85],$Vp=[1,78],$Vq=[1,79],$Vr=[1,80],$Vs=[1,73],$Vt=[1,83],$Vu=[1,84],$Vv=[1,91],$Vw=[1,106],$Vx=[2,14],$Vy=[1,113],$Vz=[1,120],$VA=[1,121],$VB=[14,23,56,57],$VC=[65,66],$VD=[2,69],$VE=[1,129],$VF=[1,130],$VG=[1,131],$VH=[1,132],$VI=[1,133],$VJ=[1,125],$VK=[1,126],$VL=[1,127],$VM=[1,128],$VN=[14,18,23,46,47,48,49,50,53,56,57,60,61,62,63,65,66],$VO=[14,23,56,57,65,66],$VP=[14,18,23,53],$VQ=[11,12,44,45,47,48,58,67,68],$VR=[95,96],$VS=[14,18,23,80],$VT=[1,170],$VU=[14,18,23,46,47,53,56,57,60,61,62,63,65,66],$VV=[14,18],$VW=[14,18,23,46,47,48,49,53,56,57,60,61,62,63,65,66];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"PROGRAMA":3,"PROGRAMA_ESTRUCTURA":4,"EOF":5,"FUNCIONES":6,"PROGRAMA_RECOLECTADO":7,"LSENTENCIAS":8,"FUNCION":9,"function":10,"id":11,"pa":12,"PARAMETROS":13,"pc":14,"lla":15,"llc":16,"VARIABLES_TIPO":17,"cm":18,"SENTENCIAS":19,"INST_CONSOLA":20,"INST_CREAR_VARIABLES":21,"INST_ASIGNAR_VARIABLES":22,"eos":23,"INST_GRAFICADOR":24,"INST_IF":25,"INST_WHILE":26,"INST_DO_WHILE":27,"INST_INCREMENTO":28,"INST_FOR":29,"INST_CREAR_ARREGLO":30,"INST_ASIGNAR_ARREGLO":31,"INST_PUSH":32,"INST_FOR_IN":33,"INST_FOR_OF":34,"INST_FUNCION_LLAMADA":35,"PARAMETRO_ENTRADA":36,"DATO":37,"console":38,"pt":39,"log":40,"DATO_CONSOL":41,"EXP_CADENA":42,"EXP_NUMERICA":43,"cadena":44,"numero":45,"mas":46,"menos":47,"por":48,"div":49,"modular":50,"length":51,"ca":52,"cc":53,"pop":54,"CONDICION":55,"and":56,"or":57,"not":58,"COMPARACION":59,"menor":60,"mayor":61,"menorIgual":62,"mayorIgual":63,"DATO_COMPARACION":64,"mismo":65,"diferente":66,"false":67,"true":68,"VARIABLES_ACCESO":69,"VARIABLES_CUERPO":70,"let":71,"var":72,"const":73,"VARIABLES_ASIGNACION":74,"dspts":75,"TIPO_DATO":76,"boolean":77,"string":78,"number":79,"igual":80,"graficar_ts":81,"ASIGNACION":82,"if":83,"ELSE":84,"else":85,"IF":86,"while":87,"do":88,"for":89,"FOR_ASIGNACION":90,"FOR_AUMENTO":91,"ARREGLO_DATOS":92,"push":93,"FOR_IN_ASIGNACION":94,"in":95,"of":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"function",11:"id",12:"pa",14:"pc",15:"lla",16:"llc",18:"cm",23:"eos",38:"console",39:"pt",40:"log",44:"cadena",45:"numero",46:"mas",47:"menos",48:"por",49:"div",50:"modular",51:"length",52:"ca",53:"cc",54:"pop",56:"and",57:"or",58:"not",60:"menor",61:"mayor",62:"menorIgual",63:"mayorIgual",65:"mismo",66:"diferente",67:"false",68:"true",71:"let",72:"var",73:"const",75:"dspts",77:"boolean",78:"string",79:"number",80:"igual",81:"graficar_ts",83:"if",85:"else",86:"IF",87:"while",88:"do",89:"for",93:"push",95:"in",96:"of"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[7,1],[7,0],[6,2],[6,1],[9,8],[13,4],[13,3],[13,1],[13,2],[13,0],[8,2],[8,1],[19,1],[19,1],[19,2],[19,1],[19,1],[19,1],[19,1],[19,2],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,2],[19,2],[35,5],[36,3],[36,1],[20,7],[41,1],[41,3],[41,1],[37,1],[37,1],[42,1],[43,1],[43,3],[43,3],[43,3],[43,3],[43,2],[43,3],[43,3],[43,1],[43,3],[43,3],[43,4],[43,5],[55,3],[55,3],[55,2],[55,1],[55,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[64,1],[64,1],[64,1],[64,1],[21,3],[69,1],[69,1],[69,1],[70,1],[70,2],[70,2],[70,3],[70,3],[70,4],[70,4],[70,5],[17,2],[76,1],[76,1],[76,1],[74,2],[24,4],[22,1],[82,2],[82,4],[25,7],[25,8],[84,2],[84,4],[26,7],[27,8],[28,3],[28,3],[29,10],[90,1],[90,2],[91,1],[91,1],[30,5],[30,6],[30,9],[30,10],[92,3],[92,1],[31,7],[32,7],[33,9],[94,2],[94,1],[34,9]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return instruccionesAST.nuevoPrograma($$[$0-1]);
break;
case 2:
$$[$0].unshift($$[$0-1]); this.$=$$[$0];
break;
case 3: case 17: case 18: case 20: case 21: case 22: case 23: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 102: case 104: case 105:
this.$=$$[$0];
break;
case 4:
$$[$0].unshift($$[$0-2]); $$[$0].unshift($$[$0-1]); this.$=$$[$0];
break;
case 5: case 8: case 36:
this.$=[$$[$0]];
break;
case 6:
this.$=[];
break;
case 7:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 9:
this.$=instruccionesAST.nuevaFuncionCreada($$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 10:
$$[$0].push(instruccionesAST.nuevoParametro($$[$0-3],$$[$0-2])); this.$=$$[$0];
break;
case 11:
$$[$0].push(instruccionesAST.nuevoParametro($$[$0-2],null)); this.$=$$[$0];
break;
case 12:
this.$=[instruccionesAST.nuevoParametro($$[$0],null)];
break;
case 13:
this.$=[instruccionesAST.nuevoParametro($$[$0-1],$$[$0])];
break;
case 14:
this.$=[null];
break;
case 15:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 16:
 this.$ = [$$[$0]]; 
break;
case 19: case 24: case 103:
this.$=$$[$0-1];
break;
case 32: case 33:
this.$=instruccionesAST.saltoError(); reportarError("Sintactico", "Linea mal escrita:<br>"+editor.getLine(this._$.first_line-1), this._$.first_column, this._$.first_line-1);
break;
case 34:
this.$=instruccionesAST.nuevaFuncionLlamada($$[$0-4],$$[$0-2]);
break;
case 35:
$$[$0].push($$[$0-2]); this.$=$$[$0];
break;
case 37:
 this.$ = instruccionesAST.nuevoImprimir($$[$0-2]);
break;
case 38: case 40: case 41: case 42: case 68: case 69:
 this.$ = $$[$0]; 
break;
case 39:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.CONCATENACION);
break;
case 43:
 this.$ = instruccionesAST.nuevoValor($$[$0],TIPO_VALOR.CADENA);
break;
case 44:
 this.$ = instruccionesAST.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO); 
break;
case 45:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.SUMA);
break;
case 46:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.RESTA);
break;
case 47:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MULTIPLICACION);
break;
case 48:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DIVISION);
break;
case 49:
 this.$ = instruccionesAST.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 50:
 this.$ = instruccionesAST.nuevoOperacionUnaria($$[$0],TIPO_OPERACION.POTENCIA);
break;
case 51:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MODULAR);
break;
case 52:
 this.$ = instruccionesAST.nuevoValor($$[$0],TIPO_VALOR.IDENTIFICADOR)
break;
case 53: case 61:
 this.$ = $$[$0-1];
break;
case 54:
 this.$ = instruccionesAST.nuevoLength($$[$0-2]);
break;
case 55:
 this.$ = instruccionesAST.nuevoValorArreglo($$[$0-3],$$[$0-1], TIPO_VALOR.ARREGLO);
break;
case 56:
 this.$ = instruccionesAST.nuevoPop($$[$0-4], TIPO_VALOR.POP);
break;
case 57:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.AND);
break;
case 58:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.OR);
break;
case 59:
 this.$ = instruccionesAST.nuevoOperacionUnaria($$[$0],TIPO_OPERACION.NEGACION);
break;
case 60: case 84: case 85: case 86: case 87: case 88: case 115: case 116:
 this.$ = $$[$0];
break;
case 62:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MENOR_QUE);
break;
case 63:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MAYOR_QUE);
break;
case 64:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MENOR_IGUAL);
break;
case 65:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MAYOR_IGUAL);
break;
case 66:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.IGUAL);
break;
case 67:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DIFERENTE);
break;
case 70: case 71:
 this.$ = instruccionesAST.nuevoValor($$[$0],TIPO_VALOR.BOOLEANO);
break;
case 72:
 this.$ = instruccionesAST.nuevaVariable($$[$0-2],$$[$0-1]); 
break;
case 73: case 74: case 75: case 95:
this.$ = $$[$0];
break;
case 76:
 this.$ = [ instruccionesAST.crearVariable($$[$0],null,null) ];
break;
case 77:
 this.$ = [ instruccionesAST.crearVariable($$[$0-1],null,$$[$0]) ];
break;
case 78:
 this.$ = [ instruccionesAST.crearVariable($$[$0-1],$$[$0],null) ];
break;
case 79:
 this.$ = [ instruccionesAST.crearVariable($$[$0-2],$$[$0-1],$$[$0]) ];
break;
case 80:
 $$[$0].push(instruccionesAST.crearVariable($$[$0-2],null,null)); this.$ = $$[$0];
break;
case 81:
 $$[$0].push(instruccionesAST.crearVariable($$[$0-3],null,$$[$0-2])); this.$ = $$[$0];
break;
case 82:
 $$[$0].push(instruccionesAST.crearVariable($$[$0-3],$$[$0-2],null)); this.$ = $$[$0];
break;
case 83:
 $$[$0].push(instruccionesAST.crearVariable($$[$0-4],$$[$0-3],$$[$0-2])); this.$ = $$[$0];
break;
case 89:
 this.$ = instruccionesAST.graficar_ts(); 
break;
case 90:
 this.$ = instruccionesAST.nuevasAsignaciones($$[$0]);
break;
case 91:
 this.$ = [instruccionesAST.nuevaAsignacion($$[$0-1],$$[$0])];
break;
case 92:
 $$[$0].push(instruccionesAST.nuevaAsignacion($$[$0-3],$$[$0-2])); this.$ = $$[$0];
break;
case 93:
 this.$ = instruccionesAST.nuevoIf($$[$0-4],$$[$0-1],"null");
break;
case 94:
 this.$ = instruccionesAST.nuevoIf($$[$0-5],$$[$0-2],$$[$0])
break;
case 96:
this.$ = instruccionesAST.nuevoElse($$[$0-1]);
break;
case 97:
 this.$ = instruccionesAST.nuevoWhile($$[$0-4],$$[$0-1]);
break;
case 98:
 this.$ = instruccionesAST.nuevoDoWhile($$[$0-1],$$[$0-5]);
break;
case 99:
 this.$ = instruccionesAST.nuevoIncremento($$[$0-2]);
break;
case 100:
 this.$ = instruccionesAST.nuevoDecremento($$[$0-2]);
break;
case 101:
this.$ = instruccionesAST.nuevoFor($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 106:
this.$=instruccionesAST.nuevoArreglo($$[$0-4],$$[$0-3],null,[]);
break;
case 107:
this.$=instruccionesAST.nuevoArreglo($$[$0-5],$$[$0-4],$$[$0-1],[]);
break;
case 108:
this.$=instruccionesAST.nuevoArreglo($$[$0-8],$$[$0-7],null,$$[$0-2]);
break;
case 109:
this.$=instruccionesAST.nuevoArreglo($$[$0-9],$$[$0-8],$$[$0-5],$$[$0-2]);
break;
case 110:
 $$[$0].push($$[$0-2]); this.$ = $$[$0];
break;
case 111:
 this.$ = [$$[$0]];
break;
case 112:
 this.$ = instruccionesAST.nuevaAsignacionArreglo($$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 113:
 this.$ = instruccionesAST.nuevoPush($$[$0-6],$$[$0-2]);
break;
case 114:
 this.$ =instruccionesAST.nuevoForIn($$[$0-6],$$[$0-4],$$[$0-1]) ;
break;
case 117:
 this.$ =instruccionesAST.nuevoForOf($$[$0-6],$$[$0-4],$$[$0-1]) ;
break;
}
},
table: [{2:$V0,3:1,4:2,5:$V1,6:3,7:4,8:6,9:5,10:$V2,11:$V3,19:8,20:9,21:10,22:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,38:$V4,69:26,71:$V5,72:$V6,73:$V7,81:$V8,82:27,83:$V9,87:$Va,88:$Vb,89:$Vc},{1:[3]},{5:[1,37]},{2:$V0,5:$V1,7:38,8:6,9:39,10:$V2,11:$V3,19:8,20:9,21:10,22:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,38:$V4,69:26,71:$V5,72:$V6,73:$V7,81:$V8,82:27,83:$V9,87:$Va,88:$Vb,89:$Vc},{5:[2,3]},o($Vd,[2,8]),{2:$V0,5:[2,5],6:40,9:5,10:$V2,11:$V3,19:41,20:9,21:10,22:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,38:$V4,69:26,71:$V5,72:$V6,73:$V7,81:$V8,82:27,83:$V9,87:$Va,88:$Vb,89:$Vc},{11:[1,42]},o($Ve,[2,16]),o($Ve,[2,17]),o($Ve,[2,18]),{23:[1,43]},o($Ve,[2,20]),o($Ve,[2,21]),o($Ve,[2,22]),o($Ve,[2,23]),{23:[1,44]},o($Ve,[2,25]),o($Ve,[2,26]),o($Ve,[2,27]),o($Ve,[2,28]),o($Ve,[2,29]),o($Ve,[2,30]),o($Ve,[2,31]),{16:[1,46],23:[1,45]},{39:[1,47]},{11:[1,49],70:48},o($Vf,[2,90]),{12:[1,50]},{12:[1,51]},{12:[1,52]},{15:[1,53]},{12:[1,58],39:[1,57],46:$Vg,47:$Vh,52:[1,56],74:59,80:$Vi},{12:[1,61]},{11:[2,73]},{11:[2,74]},{11:[2,75]},{1:[2,1]},{5:[2,2]},o($Vd,[2,7]),{2:$V0,5:$V1,7:62,8:6,9:39,10:$V2,11:$V3,19:8,20:9,21:10,22:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,38:$V4,69:26,71:$V5,72:$V6,73:$V7,81:$V8,82:27,83:$V9,87:$Va,88:$Vb,89:$Vc},o($Ve,[2,15]),{12:[1,63]},o($Ve,[2,19]),o($Ve,[2,24]),o($Ve,[2,32]),o($Ve,[2,33]),{40:[1,64]},{23:[1,65]},{17:68,18:$Vj,23:$Vk,52:[1,66],74:67,75:$Vl,80:$Vi},{14:[1,71]},{11:$Vm,12:$Vn,42:82,43:76,44:$Vo,45:$Vp,47:$Vq,48:$Vr,55:72,58:$Vs,59:74,64:77,67:$Vt,68:$Vu},{11:$Vm,12:$Vn,42:82,43:76,44:$Vo,45:$Vp,47:$Vq,48:$Vr,55:86,58:$Vs,59:74,64:77,67:$Vt,68:$Vu},{2:$V0,8:87,11:$V3,19:8,20:9,21:10,22:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,38:$V4,69:26,71:$V5,72:$V6,73:$V7,81:$V8,82:27,83:$V9,87:$Va,88:$Vb,89:$Vc},{46:[1,88]},{47:[1,89]},{11:$Vm,12:$Vv,43:90,45:$Vp,47:$Vq,48:$Vr},{93:[1,92]},{11:$Vm,12:$Vv,36:93,37:94,42:95,43:96,44:$Vo,45:$Vp,47:$Vq,48:$Vr},o($Vf,[2,91],{18:[1,97]}),{11:$Vm,12:$Vv,37:98,42:95,43:96,44:$Vo,45:$Vp,47:$Vq,48:$Vr},{11:[1,104],21:101,22:102,69:103,71:$V5,72:$V6,73:$V7,82:27,90:99,94:100},{5:[2,4]},{11:$Vw,13:105,14:$Vx},{12:[1,107]},o([2,5,10,11,12,16,38,44,45,47,48,58,67,68,71,72,73,81,83,87,88,89],[2,72]),{53:[1,108]},{18:[1,109],23:[2,77]},{18:[1,111],23:[2,78],74:110,80:$Vi},{11:$Vy,70:112},{76:114,77:[1,115],78:[1,116],79:[1,117]},{23:[1,118]},{14:[1,119],56:$Vz,57:$VA},{11:$Vm,12:$Vn,42:82,43:76,44:$Vo,45:$Vp,47:$Vq,48:$Vr,55:122,58:$Vs,59:74,64:77,67:$Vt,68:$Vu},o($VB,[2,60]),{11:$Vm,12:$Vn,42:82,43:124,44:$Vo,45:$Vp,47:$Vq,48:$Vr,55:123,58:$Vs,59:74,64:77,67:$Vt,68:$Vu},o($VC,$VD,{46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,60:$VJ,61:$VK,62:$VL,63:$VM}),{65:[1,134],66:[1,135]},o($VN,[2,44]),{11:$Vm,12:$Vv,43:136,45:$Vp,47:$Vq,48:$Vr},{48:[1,137]},o($VN,[2,52],{39:[1,138],52:[1,139]}),o($VO,[2,68]),o($VO,[2,70]),o($VO,[2,71]),o([14,18,23,53,56,57,65,66],[2,43]),{14:[1,140],56:$Vz,57:$VA},{2:$V0,11:$V3,16:[1,141],19:41,20:9,21:10,22:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,38:$V4,69:26,71:$V5,72:$V6,73:$V7,81:$V8,82:27,83:$V9,87:$Va,88:$Vb,89:$Vc},o($Vf,[2,99]),o($Vf,[2,100]),{46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,53:[1,142]},{11:$Vm,12:$Vv,43:143,45:$Vp,47:$Vq,48:$Vr},{12:[1,144]},{14:[1,145]},{14:[2,36],18:[1,146]},o($VP,[2,41]),o($VP,[2,42],{46:$VE,47:$VF,48:$VG,49:$VH,50:$VI}),{11:[1,148],82:147},o([14,18,23],[2,88]),{11:$Vm,12:$Vn,42:82,43:76,44:$Vo,45:$Vp,47:$Vq,48:$Vr,55:149,58:$Vs,59:74,64:77,67:$Vt,68:$Vu},{95:[1,150],96:[1,151]},o($VQ,[2,102]),{23:[1,152]},{11:[1,153],70:48},o($VR,[2,116],{74:59,80:$Vi}),{14:[1,154]},{14:[2,12],17:155,18:[1,156],75:$Vl},{11:$Vm,12:$Vv,41:157,42:158,43:159,44:$Vo,45:$Vp,47:$Vq,48:$Vr},{17:161,23:[1,160],75:$Vl,80:[1,162]},{11:$Vy,70:163},{18:[1,164],23:[2,79]},{11:$Vy,70:165},{23:[2,80]},{17:68,18:$Vj,23:$Vk,74:67,75:$Vl,80:$Vi},o($VS,[2,84]),o($VS,[2,85]),o($VS,[2,86]),o($VS,[2,87]),o($Ve,[2,89]),{15:[1,166]},{11:$Vm,12:$Vn,42:82,43:76,44:$Vo,45:$Vp,47:$Vq,48:$Vr,55:167,58:$Vs,59:74,64:77,67:$Vt,68:$Vu},{11:$Vm,12:$Vn,42:82,43:76,44:$Vo,45:$Vp,47:$Vq,48:$Vr,55:168,58:$Vs,59:74,64:77,67:$Vt,68:$Vu},o($VB,[2,59]),{14:[1,169],56:$Vz,57:$VA},o($VC,$VD,{14:$VT,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,60:$VJ,61:$VK,62:$VL,63:$VM}),{11:$Vm,12:$Vv,43:171,45:$Vp,47:$Vq,48:$Vr},{11:$Vm,12:$Vv,43:172,45:$Vp,47:$Vq,48:$Vr},{11:$Vm,12:$Vv,43:173,45:$Vp,47:$Vq,48:$Vr},{11:$Vm,12:$Vv,43:174,45:$Vp,47:$Vq,48:$Vr},{11:$Vm,12:$Vv,43:175,45:$Vp,47:$Vq,48:$Vr},{11:$Vm,12:$Vv,43:176,45:$Vp,47:$Vq,48:$Vr},{11:$Vm,12:$Vv,43:177,45:$Vp,47:$Vq,48:$Vr},{11:$Vm,12:$Vv,43:178,45:$Vp,47:$Vq,48:$Vr},{11:$Vm,12:$Vv,43:179,45:$Vp,47:$Vq,48:$Vr},{11:$Vm,12:$Vv,42:82,43:181,44:$Vo,45:$Vp,47:$Vq,48:$Vr,64:180,67:$Vt,68:$Vu},{11:$Vm,12:$Vv,42:82,43:181,44:$Vo,45:$Vp,47:$Vq,48:$Vr,64:182,67:$Vt,68:$Vu},o($VU,[2,49],{48:$VG,49:$VH,50:$VI}),{11:$Vm,12:$Vv,43:183,45:$Vp,47:$Vq,48:$Vr},{51:[1,184],54:[1,185]},{11:$Vm,12:$Vv,43:186,45:$Vp,47:$Vq,48:$Vr},{15:[1,187]},{87:[1,188]},{80:[1,189]},{14:$VT,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI},{11:$Vm,12:$Vv,37:190,42:95,43:96,44:$Vo,45:$Vp,47:$Vq,48:$Vr},{23:[1,191]},{11:$Vm,12:$Vv,36:192,37:94,42:95,43:96,44:$Vo,45:$Vp,47:$Vq,48:$Vr},o($Vf,[2,92]),{74:59,80:$Vi},{23:[1,193],56:$Vz,57:$VA},{11:[1,194]},{11:[1,195]},o($VQ,[2,103]),o($VR,[2,115],{74:67,17:68,18:$Vj,23:$Vk,75:$Vl,80:$Vi}),{15:[1,196]},{14:[2,13],18:[1,197]},{11:$Vw,13:198,14:$Vx},{14:[1,199],18:[1,200]},o($VV,[2,38]),o($VV,[2,40],{46:$VE,47:$VF,48:$VG,49:$VH,50:$VI}),o($Ve,[2,106]),{23:[1,201],80:[1,202]},{52:[1,203]},{23:[2,81]},{11:$Vy,70:204},{23:[2,82]},{2:$V0,8:205,11:$V3,19:8,20:9,21:10,22:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,38:$V4,69:26,71:$V5,72:$V6,73:$V7,81:$V8,82:27,83:$V9,87:$Va,88:$Vb,89:$Vc},o($VB,[2,57]),o([14,23,57],[2,58],{56:$Vz}),o($VB,[2,61]),o($VN,[2,53]),o($VB,[2,62],{46:$VE,47:$VF,48:$VG,49:$VH,50:$VI}),o($VB,[2,63],{46:$VE,47:$VF,48:$VG,49:$VH,50:$VI}),o($VB,[2,64],{46:$VE,47:$VF,48:$VG,49:$VH,50:$VI}),o($VB,[2,65],{46:$VE,47:$VF,48:$VG,49:$VH,50:$VI}),o($VU,[2,45],{48:$VG,49:$VH,50:$VI}),o($VU,[2,46],{48:$VG,49:$VH,50:$VI}),o($VW,[2,47],{50:$VI}),o($VW,[2,48],{50:$VI}),o($VN,[2,51]),o($VB,[2,66]),o($VB,$VD,{46:$VE,47:$VF,48:$VG,49:$VH,50:$VI}),o($VB,[2,67]),o($VW,[2,50],{50:$VI}),o($VN,[2,54]),{12:[1,206]},{46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,53:[1,207]},{2:$V0,8:208,11:$V3,19:8,20:9,21:10,22:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,38:$V4,69:26,71:$V5,72:$V6,73:$V7,81:$V8,82:27,83:$V9,87:$Va,88:$Vb,89:$Vc},{12:[1,209]},{11:$Vm,12:$Vv,37:210,42:95,43:96,44:$Vo,45:$Vp,47:$Vq,48:$Vr},{14:[1,211]},o($Ve,[2,34]),{14:[2,35]},{11:[1,215],22:214,28:213,82:27,91:212},{14:[1,216]},{14:[1,217]},{2:$V0,8:218,11:$V3,19:8,20:9,21:10,22:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,38:$V4,69:26,71:$V5,72:$V6,73:$V7,81:$V8,82:27,83:$V9,87:$Va,88:$Vb,89:$Vc},{11:$Vw,13:219,14:$Vx},{14:[2,11]},{23:[1,220]},{11:$Vm,12:$Vv,41:221,42:158,43:159,44:$Vo,45:$Vp,47:$Vq,48:$Vr},o($Ve,[2,107]),{52:[1,222]},{11:$Vm,12:$Vv,37:224,42:95,43:96,44:$Vo,45:$Vp,47:$Vq,48:$Vr,92:223},{23:[2,83]},{2:$V0,11:$V3,16:[1,225],19:41,20:9,21:10,22:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,38:$V4,69:26,71:$V5,72:$V6,73:$V7,81:$V8,82:27,83:$V9,87:$Va,88:$Vb,89:$Vc},{14:[1,226]},o($VN,[2,55]),{2:$V0,11:$V3,16:[1,227],19:41,20:9,21:10,22:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,38:$V4,69:26,71:$V5,72:$V6,73:$V7,81:$V8,82:27,83:$V9,87:$Va,88:$Vb,89:$Vc},{11:$Vm,12:$Vn,42:82,43:76,44:$Vo,45:$Vp,47:$Vq,48:$Vr,55:228,58:$Vs,59:74,64:77,67:$Vt,68:$Vu},{23:[1,229]},{23:[1,230]},{14:[1,231]},{14:[2,104]},{14:[2,105]},{46:$Vg,47:$Vh,74:59,80:$Vi},{15:[1,232]},{15:[1,233]},{2:$V0,11:$V3,16:[1,234],19:41,20:9,21:10,22:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,38:$V4,69:26,71:$V5,72:$V6,73:$V7,81:$V8,82:27,83:$V9,87:$Va,88:$Vb,89:$Vc},{14:[2,10]},o($Ve,[2,37]),o($VV,[2,39]),{11:$Vm,12:$Vv,37:224,42:95,43:96,44:$Vo,45:$Vp,47:$Vq,48:$Vr,92:235},{53:[1,236]},{18:[1,237],53:[2,111]},o($Ve,[2,93],{84:238,85:[1,239]}),o($VN,[2,56]),o($Ve,[2,97]),{14:[1,240],56:$Vz,57:$VA},o($Ve,[2,112]),o($Ve,[2,113]),{15:[1,241]},{2:$V0,8:242,11:$V3,19:8,20:9,21:10,22:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,38:$V4,69:26,71:$V5,72:$V6,73:$V7,81:$V8,82:27,83:$V9,87:$Va,88:$Vb,89:$Vc},{2:$V0,8:243,11:$V3,19:8,20:9,21:10,22:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,38:$V4,69:26,71:$V5,72:$V6,73:$V7,81:$V8,82:27,83:$V9,87:$Va,88:$Vb,89:$Vc},o($Vd,[2,9]),{53:[1,244]},{23:[1,245]},{11:$Vm,12:$Vv,37:224,42:95,43:96,44:$Vo,45:$Vp,47:$Vq,48:$Vr,92:246},o($Ve,[2,94]),{15:[1,248],86:[1,247]},o($Ve,[2,98]),{2:$V0,8:249,11:$V3,19:8,20:9,21:10,22:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,38:$V4,69:26,71:$V5,72:$V6,73:$V7,81:$V8,82:27,83:$V9,87:$Va,88:$Vb,89:$Vc},{2:$V0,11:$V3,16:[1,250],19:41,20:9,21:10,22:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,38:$V4,69:26,71:$V5,72:$V6,73:$V7,81:$V8,82:27,83:$V9,87:$Va,88:$Vb,89:$Vc},{2:$V0,11:$V3,16:[1,251],19:41,20:9,21:10,22:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,38:$V4,69:26,71:$V5,72:$V6,73:$V7,81:$V8,82:27,83:$V9,87:$Va,88:$Vb,89:$Vc},{23:[1,252]},o($Ve,[2,108]),{53:[2,110]},o($Ve,[2,95]),{2:$V0,8:253,11:$V3,19:8,20:9,21:10,22:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,38:$V4,69:26,71:$V5,72:$V6,73:$V7,81:$V8,82:27,83:$V9,87:$Va,88:$Vb,89:$Vc},{2:$V0,11:$V3,16:[1,254],19:41,20:9,21:10,22:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,38:$V4,69:26,71:$V5,72:$V6,73:$V7,81:$V8,82:27,83:$V9,87:$Va,88:$Vb,89:$Vc},o($Ve,[2,114]),o($Ve,[2,117]),o($Ve,[2,109]),{2:$V0,11:$V3,16:[1,255],19:41,20:9,21:10,22:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:23,38:$V4,69:26,71:$V5,72:$V6,73:$V7,81:$V8,82:27,83:$V9,87:$Va,88:$Vb,89:$Vc},o($Ve,[2,101]),o($Ve,[2,96])],
defaultActions: {4:[2,3],34:[2,73],35:[2,74],36:[2,75],37:[2,1],38:[2,2],62:[2,4],112:[2,80],163:[2,81],165:[2,82],192:[2,35],198:[2,11],204:[2,83],213:[2,104],214:[2,105],219:[2,10],246:[2,110]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Omitir espacios en blanco
break;
case 1://comentario simple línea
break;
case 2://comentario multiple líneas
break;
case 3:return 45;              //Reconocimiento de numeros
break;
case 4:return 38;
break;
case 5:return 40;
break;
case 6:return 68;
break;
case 7:return 67;
break;
case 8:yy_.yytext = yy_.yytext.slice(1,-1);  return 44;
break;
case 9:yy_.yytext = yy_.yytext.slice(1,-1);  return 44;
break;
case 10:return 79;
break;
case 11:return 77;
break;
case 12:return 78;
break;
case 13:return 10;
break;
case 14:return 'void';
break;
case 15:return 72;
break;
case 16:return 71;
break;
case 17:return 73;
break;
case 18:return 'type';
break;
case 19:return 81;
break;
case 20:return 83;
break;
case 21:return 85;
break;
case 22:return 87;
break;
case 23:return 88;
break;
case 24:return 89;
break;
case 25:return 96;
break;
case 26:return 95;
break;
case 27:return 'continue';
break;
case 28:return 'break';
break;
case 29:return 'return';
break;
case 30:return 'switch';
break;
case 31:return 'case';
break;
case 32:return 'default';
break;
case 33:return 'type';
break;
case 34:return 51;
break;
case 35:return 54;
break;
case 36:return 93;
break;
case 37:return 63;
break;
case 38:return 62;
break;
case 39:return 65;
break;
case 40:return 66;
break;
case 41:return 61;
break;
case 42:return 60;
break;
case 43:return 56;
break;
case 44:return 57;
break;
case 45:return 58;
break;
case 46:return 'qEs';
break;
case 47:return 39;
break;
case 48:return 18;
break;
case 49:return 12;
break;
case 50:return 14;
break;
case 51:return 46;
break;
case 52:return 48;
break;
case 53:return 49;
break;
case 54:return 47;
break;
case 55:return 50;
break;
case 56:return 75;
break;
case 57:return 15;
break;
case 58:return 16;
break;
case 59:return 80;
break;
case 60:return 52;
break;
case 61:return 53;
break;
case 62:return 23;
break;
case 63:return 11;
break;
case 64:return 5;                 //End Of File
break;
case 65:reportarError("Lexico", "Caracter no reconocido por el lenguaje <br>"+yy_.yytext, yy_.yylloc.first_column, yy_.yylloc.first_line);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:"[^"]*")/,/^(?:'[^']*')/,/^(?:[N|n]umber\b)/,/^(?:boolean\b)/,/^(?:[S|s]tring\b)/,/^(?:function\b)/,/^(?:void\b)/,/^(?:var\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:type\b)/,/^(?:graficar_ts\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:type\b)/,/^(?:length\b)/,/^(?:pop\b)/,/^(?:push\b)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:\.)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:%)/,/^(?::)/,/^(?:\{)/,/^(?:\})/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"string":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = compilador;
exports.Parser = compilador.Parser;
exports.parse = function () { return compilador.parse.apply(compilador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}